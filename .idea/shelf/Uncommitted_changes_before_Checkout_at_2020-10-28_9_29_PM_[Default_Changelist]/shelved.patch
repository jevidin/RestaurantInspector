Index: app/src/main/java/ca/cmpt276/project/RestaurantListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.cmpt276.project;\r\n\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport ca.cmpt276.project.model.Inspection;\r\nimport ca.cmpt276.project.model.InspectionListManager;\r\nimport ca.cmpt276.project.model.Restaurant;\r\nimport ca.cmpt276.project.model.RestaurantListManager;\r\nimport ca.cmpt276.project.model.types.HazardLevel;\r\nimport ca.cmpt276.project.model.types.InspectionType;\r\n\r\npublic class RestaurantListActivity extends AppCompatActivity {\r\n    private RestaurantListManager restaurantManager;\r\n\r\n    private static boolean read = false;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurant_list);\r\n        restaurantManager = RestaurantListManager.getInstance();\r\n\r\n        if(!read){\r\n            fillRestaurantManager();\r\n            read = true;\r\n        }\r\n\r\n        populateListView();\r\n        registerCallBack();\r\n    }\r\n\r\n\r\n\r\n    private InspectionListManager fillInspectionManager(String restaurantTracking) {\r\n        InspectionListManager inspectionList = new InspectionListManager();\r\n        InputStream is = getResources().openRawResource(R.raw.inspectionreports_itr1);\r\n        BufferedReader reader = new BufferedReader(\r\n                new InputStreamReader(is, StandardCharsets.UTF_8)\r\n        );\r\n        String line = \"\";\r\n        try {\r\n            reader.readLine();\r\n            while ((line = reader.readLine()) != null) {\r\n                //split by ','\r\n                String[] tokens = line.split(\",\");\r\n                //read data\r\n                String inspectionTracking = tokens[0].replace(\"\\\"\", \"\");\r\n\r\n                if(restaurantTracking.equals(inspectionTracking)) {\r\n                    SimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyyMMdd\");\r\n                    Date date = formatter1.parse(tokens[1]);\r\n                    String stringType = tokens[2].replace(\"\\\"\", \"\");\r\n                    InspectionType type = InspectionType.FOLLOWUP;\r\n                    if (stringType.equals(\"Routine\")) {\r\n                        type = InspectionType.ROUTINE;\r\n                    }\r\n                    int numCritical = Integer.parseInt(tokens[3]);\r\n                    int numNonCritical = Integer.parseInt(tokens[4]);\r\n                    String stringHazardLevel = tokens[5].replace(\"\\\"\", \"\");\r\n                    HazardLevel hazardLevel = HazardLevel.LOW;\r\n                    if (stringHazardLevel.equals(\"Moderate\")) {\r\n                        hazardLevel = HazardLevel.MODERATE;\r\n                    } else if (stringHazardLevel.equals(\"High\")) {\r\n                        hazardLevel = HazardLevel.HIGH;\r\n                    }\r\n                    Inspection inspection = new Inspection(date, type, numCritical, numNonCritical, hazardLevel);\r\n                    inspectionList.add(inspection);\r\n                }\r\n            }\r\n        } catch(IOException | ParseException e){\r\n            Log.wtf(\"RestaurantListActivity\", \"error reading data file on line \" + line, e);\r\n        }\r\n        return inspectionList;\r\n    }\r\n\r\n    private void fillRestaurantManager() {\r\n        InputStream is = getResources().openRawResource(R.raw.restaurants_itr1);\r\n        BufferedReader reader = new BufferedReader(\r\n                new InputStreamReader(is, StandardCharsets.UTF_8)\r\n        );\r\n        String line = \"\";\r\n        try {\r\n            reader.readLine();\r\n            while ((line = reader.readLine()) != null) {\r\n                //split by ','\r\n                String[] tokens = line.split(\",\");\r\n\r\n                //read data\r\n                Restaurant restaurant = new Restaurant(\r\n                        tokens[1].replace(\"\\\"\", \"\"), // Restaurant name\r\n                        tokens[2].replace(\"\\\"\", \"\"), // Restaurant Address\r\n                        Float.parseFloat(tokens[6]), // Restaurant Longitude\r\n                        Float.parseFloat(tokens[5]), // Restaurant Latitude\r\n                        tokens[0].replace(\"\\\"\", \"\") // Restaurant tracking number\r\n                );\r\n                String restaurantTracking = restaurant.getTracking();\r\n                InspectionListManager filled = fillInspectionManager(restaurantTracking);\r\n                restaurant.setInspections(filled);\r\n                restaurantManager.add(restaurant);\r\n            }\r\n        } catch(IOException e){\r\n            Log.wtf(\"RestaurantListActivity\", \"error reading data file on line \" + line, e);\r\n        }\r\n    }\r\n\r\n    private void populateListView() {\r\n        //code to sort alphabetically taken from https://www.youtube.com/watch?v=dZQqrPdqT1E\r\n        Collections.sort(restaurantManager.getList());\r\n        ArrayAdapter<Restaurant> adapter = new RestaurantListAdapter();\r\n        ListView list = findViewById(R.id.listViewRestaurants);\r\n        list.setAdapter(adapter);\r\n    }\r\n\r\n    private class RestaurantListAdapter extends ArrayAdapter<Restaurant>{\r\n        public RestaurantListAdapter(){\r\n            super(RestaurantListActivity.this, R.layout.restaurant_list_item, restaurantManager.getList());\r\n        }\r\n\r\n        @Override\r\n        public View getView(int position, View convertView, ViewGroup parent) {\r\n            View itemView = convertView;\r\n            if(itemView == null){\r\n                itemView = getLayoutInflater().inflate(R.layout.restaurant_list_item, parent, false);\r\n            }\r\n            // find restaurant\r\n            Restaurant currentRestaurant = restaurantManager.getRestaurant(position);\r\n            InspectionListManager currentInspectionList = currentRestaurant.getInspections();\r\n\r\n            //ImageView imageView = itemView.findViewById(R.id.item_restaurantIcon);\r\n            //imageView.setImageResource();\r\n            ImageView hazardImageView = itemView.findViewById(R.id.item_hazard_icon);\r\n            TextView nameText = itemView.findViewById(R.id.item_txt_restaurant_name);\r\n            TextView issuesText = itemView.findViewById(R.id.item_txt_issues_found);\r\n            TextView inspectionText = itemView.findViewById(R.id.item_txt_latest_inspection);\r\n            TextView hazardText = itemView.findViewById(R.id.item_txt_hazard);\r\n            nameText.setText(currentRestaurant.getName());\r\n\r\n            if(currentInspectionList.getInspections().size() > 0) {\r\n                Inspection latestInspection;\r\n                latestInspection = Collections.max(currentInspectionList.getInspections());\r\n                String issuesMessage = (latestInspection.getCritical() + latestInspection.getNonCritical()) + \" issue(s)\";\r\n                issuesText.setText(issuesMessage);\r\n\r\n                if(latestInspection.getLevel() == HazardLevel.LOW){\r\n                    hazardText.setText(R.string.hazard_low);\r\n                    hazardText.setTextColor(Color.parseColor(\"#45DE08\")); // Green\r\n                    hazardImageView.setBackgroundResource(R.drawable.green_hazard);\r\n                }\r\n                else if(latestInspection.getLevel() == HazardLevel.MODERATE){\r\n                    hazardText.setText(R.string.hazard_moderate);\r\n                    hazardText.setTextColor(Color.parseColor(\"#FA9009\")); // Orange\r\n                    hazardImageView.setBackgroundResource(R.drawable.orange_hazard);\r\n                }\r\n                else if(latestInspection.getLevel() == HazardLevel.HIGH){\r\n                    hazardText.setText(R.string.hazard_high);\r\n                    hazardText.setTextColor(Color.parseColor(\"#FA2828\")); // Red\r\n                    hazardImageView.setBackgroundResource(R.drawable.red_hazard);\r\n                }\r\n                // code to find difference between dates from https://www.baeldung.com/java-date-difference\r\n                Date currentDate = new Date();\r\n                SimpleDateFormat formatter1 = new SimpleDateFormat(\"MMM yyyy\");\r\n                long diffInMillies = Math.abs(currentDate.getTime() - latestInspection.getDate().getTime());\r\n                long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\r\n                String inspectionDateText;\r\n                if(diff > 365){\r\n                    inspectionDateText = formatter1.format(latestInspection.getDate());\r\n                }\r\n                else if(diff > 30){\r\n                    formatter1 = new SimpleDateFormat(\"MMM dd\");\r\n                    inspectionDateText = formatter1.format(latestInspection.getDate());\r\n                }\r\n                else{\r\n                    inspectionDateText = diff + \" days ago\";\r\n                }\r\n                inspectionText.setText(inspectionDateText);\r\n            }\r\n            else{\r\n                issuesText.setText(R.string.no_inspection_found);\r\n                inspectionText.setText(R.string.no_inspection_found);\r\n            }\r\n            return itemView;\r\n        }\r\n    }\r\n\r\n    private void registerCallBack(){\r\n        ListView list = findViewById(R.id.listViewRestaurants);\r\n        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View viewClicked, int position, long id) {\r\n                // Code to start Inspection List activity goes here, that activity does not exist yet so this is left empty for now\r\n                Toast.makeText(RestaurantListActivity.this, \"Open Inspection list activity for position: \" + position, Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ca/cmpt276/project/RestaurantListActivity.java	(revision c336d01291aae8e2a4eb2830f65dc84b947dd39d)
+++ app/src/main/java/ca/cmpt276/project/RestaurantListActivity.java	(date 1603945712226)
@@ -9,7 +9,6 @@
 import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.ListView;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
